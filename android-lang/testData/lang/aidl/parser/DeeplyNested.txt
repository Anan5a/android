FILE
  PsiComment(AidlTokenTypes.BLOCK_COMMENT)('/*\n * Copyright (C) 2021 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */')
  AidlPackageImpl("android.aidl.tests.nested")
    PsiElement(AidlTokenTypes.PACKAGE_KEYWORD)('package')
    AidlQualifiedNameImpl("android.aidl.tests.nested")
      AidlNameComponentImpl("android")
        PsiElement(AidlTokenTypes.IDENTIFIER)('android')
      PsiElement(AidlTokenTypes.DOT)('.')
      AidlNameComponentImpl("aidl")
        PsiElement(AidlTokenTypes.IDENTIFIER)('aidl')
      PsiElement(AidlTokenTypes.DOT)('.')
      AidlNameComponentImpl("tests")
        PsiElement(AidlTokenTypes.IDENTIFIER)('tests')
      PsiElement(AidlTokenTypes.DOT)('.')
      AidlNameComponentImpl("nested")
        PsiElement(AidlTokenTypes.IDENTIFIER)('nested')
    PsiElement(AidlTokenTypes.SEMICOLON)(';')
  AidlBodyImpl(BODY)
    AidlParcelableDeclarationImpl("DeeplyNested" as in "android.aidl.tests.nested.DeeplyNested")
      PsiElement(AidlTokenTypes.PARCELABLE_KEYWORD)('parcelable')
      AidlDottedNameImpl("DeeplyNested")
        AidlNameComponentImpl("DeeplyNested")
          PsiElement(AidlTokenTypes.IDENTIFIER)('DeeplyNested')
      PsiElement(AidlTokenTypes.LBRACE)('{')
      AidlParcelableDeclarationImpl("A" as in "android.aidl.tests.nested.DeeplyNested.A")
        PsiElement(AidlTokenTypes.PARCELABLE_KEYWORD)('parcelable')
        AidlDottedNameImpl("A")
          AidlNameComponentImpl("A")
            PsiElement(AidlTokenTypes.IDENTIFIER)('A')
        PsiElement(AidlTokenTypes.LBRACE)('{')
        PsiComment(AidlTokenTypes.COMMENT)('// Can reference deeply nested type of a sibling type.')
        AidlVariableDeclarationImpl("e")
          AidlTypeElementImpl("B.C.D.E")
            AidlQualifiedNameImpl("B.C.D.E")
              AidlNameComponentImpl("B")
                PsiElement(AidlTokenTypes.IDENTIFIER)('B')
              PsiElement(AidlTokenTypes.DOT)('.')
              AidlNameComponentImpl("C")
                PsiElement(AidlTokenTypes.IDENTIFIER)('C')
              PsiElement(AidlTokenTypes.DOT)('.')
              AidlNameComponentImpl("D")
                PsiElement(AidlTokenTypes.IDENTIFIER)('D')
              PsiElement(AidlTokenTypes.DOT)('.')
              AidlNameComponentImpl("E")
                PsiElement(AidlTokenTypes.IDENTIFIER)('E')
          AidlNameComponentImpl("e")
            PsiElement(AidlTokenTypes.IDENTIFIER)('e')
          PsiElement(AidlTokenTypes.ASSIGN)('=')
          AidlExpressionImpl("B.C.D.E.OK")
            AidlQualifiedNameImpl("B.C.D.E.OK")
              AidlNameComponentImpl("B")
                PsiElement(AidlTokenTypes.IDENTIFIER)('B')
              PsiElement(AidlTokenTypes.DOT)('.')
              AidlNameComponentImpl("C")
                PsiElement(AidlTokenTypes.IDENTIFIER)('C')
              PsiElement(AidlTokenTypes.DOT)('.')
              AidlNameComponentImpl("D")
                PsiElement(AidlTokenTypes.IDENTIFIER)('D')
              PsiElement(AidlTokenTypes.DOT)('.')
              AidlNameComponentImpl("E")
                PsiElement(AidlTokenTypes.IDENTIFIER)('E')
              PsiElement(AidlTokenTypes.DOT)('.')
              AidlNameComponentImpl("OK")
                PsiElement(AidlTokenTypes.IDENTIFIER)('OK')
          PsiElement(AidlTokenTypes.SEMICOLON)(';')
        PsiElement(AidlTokenTypes.RBRACE)('}')
      AidlParcelableDeclarationImpl("B" as in "android.aidl.tests.nested.DeeplyNested.B")
        PsiElement(AidlTokenTypes.PARCELABLE_KEYWORD)('parcelable')
        AidlDottedNameImpl("B")
          AidlNameComponentImpl("B")
            PsiElement(AidlTokenTypes.IDENTIFIER)('B')
        PsiElement(AidlTokenTypes.LBRACE)('{')
        AidlParcelableDeclarationImpl("C" as in "android.aidl.tests.nested.DeeplyNested.B.C")
          PsiElement(AidlTokenTypes.PARCELABLE_KEYWORD)('parcelable')
          AidlDottedNameImpl("C")
            AidlNameComponentImpl("C")
              PsiElement(AidlTokenTypes.IDENTIFIER)('C')
          PsiElement(AidlTokenTypes.LBRACE)('{')
          AidlParcelableDeclarationImpl("D" as in "android.aidl.tests.nested.DeeplyNested.B.C.D")
            PsiElement(AidlTokenTypes.PARCELABLE_KEYWORD)('parcelable')
            AidlDottedNameImpl("D")
              AidlNameComponentImpl("D")
                PsiElement(AidlTokenTypes.IDENTIFIER)('D')
            PsiElement(AidlTokenTypes.LBRACE)('{')
            AidlEnumDeclarationImpl("E" as in "android.aidl.tests.nested.DeeplyNested.B.C.D.E")
              PsiElement(AidlTokenTypes.ENUM_KEYWORD)('enum')
              AidlDottedNameImpl("E")
                AidlNameComponentImpl("E")
                  PsiElement(AidlTokenTypes.IDENTIFIER)('E')
              PsiElement(AidlTokenTypes.LBRACE)('{')
              AidlEnumeratorDeclarationImpl("OK")
                AidlNameComponentImpl("OK")
                  PsiElement(AidlTokenTypes.IDENTIFIER)('OK')
              PsiElement(AidlTokenTypes.RBRACE)('}')
            PsiElement(AidlTokenTypes.RBRACE)('}')
          PsiElement(AidlTokenTypes.RBRACE)('}')
        PsiElement(AidlTokenTypes.RBRACE)('}')
      PsiElement(AidlTokenTypes.RBRACE)('}')