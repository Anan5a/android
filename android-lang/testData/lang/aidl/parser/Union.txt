FILE
  PsiComment(AidlTokenTypes.BLOCK_COMMENT)('/*\n * Copyright (C) 2020 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */')
  AidlPackageImpl("android.aidl.tests")
    PsiElement(AidlTokenTypes.PACKAGE_KEYWORD)('package')
    AidlQualifiedNameImpl("android.aidl.tests")
      AidlNameComponentImpl("android")
        PsiElement(AidlTokenTypes.IDENTIFIER)('android')
      PsiElement(AidlTokenTypes.DOT)('.')
      AidlNameComponentImpl("aidl")
        PsiElement(AidlTokenTypes.IDENTIFIER)('aidl')
      PsiElement(AidlTokenTypes.DOT)('.')
      AidlNameComponentImpl("tests")
        PsiElement(AidlTokenTypes.IDENTIFIER)('tests')
    PsiElement(AidlTokenTypes.SEMICOLON)(';')
  AidlImportImpl("android.aidl.tests.ByteEnum")
    PsiElement(AidlTokenTypes.IMPORT_KEYWORD)('import')
    AidlQualifiedNameImpl("android.aidl.tests.ByteEnum")
      AidlNameComponentImpl("android")
        PsiElement(AidlTokenTypes.IDENTIFIER)('android')
      PsiElement(AidlTokenTypes.DOT)('.')
      AidlNameComponentImpl("aidl")
        PsiElement(AidlTokenTypes.IDENTIFIER)('aidl')
      PsiElement(AidlTokenTypes.DOT)('.')
      AidlNameComponentImpl("tests")
        PsiElement(AidlTokenTypes.IDENTIFIER)('tests')
      PsiElement(AidlTokenTypes.DOT)('.')
      AidlNameComponentImpl("ByteEnum")
        PsiElement(AidlTokenTypes.IDENTIFIER)('ByteEnum')
    PsiElement(AidlTokenTypes.SEMICOLON)(';')
  AidlBodyImpl(BODY)
    AidlAnnotationElementImpl("JavaDerive")
      PsiElement(AidlTokenTypes.AT)('@')
      AidlQualifiedNameImpl("JavaDerive")
        AidlNameComponentImpl("JavaDerive")
          PsiElement(AidlTokenTypes.IDENTIFIER)('JavaDerive')
      PsiElement(AidlTokenTypes.LPAREN)('(')
      AidlNameComponentImpl("toString")
        PsiElement(AidlTokenTypes.IDENTIFIER)('toString')
      PsiElement(AidlTokenTypes.ASSIGN)('=')
      AidlExpressionImpl(EXPRESSION)
        PsiElement(AidlTokenTypes.TRUE_KEYWORD)('true')
      PsiElement(AidlTokenTypes.COMMA)(',')
      AidlNameComponentImpl("equals")
        PsiElement(AidlTokenTypes.IDENTIFIER)('equals')
      PsiElement(AidlTokenTypes.ASSIGN)('=')
      AidlExpressionImpl(EXPRESSION)
        PsiElement(AidlTokenTypes.TRUE_KEYWORD)('true')
      PsiElement(AidlTokenTypes.RPAREN)(')')
    AidlAnnotationElementImpl("RustDerive")
      PsiElement(AidlTokenTypes.AT)('@')
      AidlQualifiedNameImpl("RustDerive")
        AidlNameComponentImpl("RustDerive")
          PsiElement(AidlTokenTypes.IDENTIFIER)('RustDerive')
      PsiElement(AidlTokenTypes.LPAREN)('(')
      AidlNameComponentImpl("Clone")
        PsiElement(AidlTokenTypes.IDENTIFIER)('Clone')
      PsiElement(AidlTokenTypes.ASSIGN)('=')
      AidlExpressionImpl(EXPRESSION)
        PsiElement(AidlTokenTypes.TRUE_KEYWORD)('true')
      PsiElement(AidlTokenTypes.COMMA)(',')
      AidlNameComponentImpl("PartialEq")
        PsiElement(AidlTokenTypes.IDENTIFIER)('PartialEq')
      PsiElement(AidlTokenTypes.ASSIGN)('=')
      AidlExpressionImpl(EXPRESSION)
        PsiElement(AidlTokenTypes.TRUE_KEYWORD)('true')
      PsiElement(AidlTokenTypes.RPAREN)(')')
    AidlUnionDeclarationImpl("Union" as in "android.aidl.tests.Union")
      PsiElement(AidlTokenTypes.UNION_KEYWORD)('union')
      AidlDottedNameImpl("Union")
        AidlNameComponentImpl("Union")
          PsiElement(AidlTokenTypes.IDENTIFIER)('Union')
      PsiElement(AidlTokenTypes.LBRACE)('{')
      AidlVariableDeclarationImpl("ns")
        AidlTypeElementImpl(TYPE_ELEMENT)
          PsiElement(AidlTokenTypes.INT_KEYWORD)('int')
          PsiElement(AidlTokenTypes.LBRACKET)('[')
          PsiElement(AidlTokenTypes.RBRACKET)(']')
        AidlNameComponentImpl("ns")
          PsiElement(AidlTokenTypes.IDENTIFIER)('ns')
        PsiElement(AidlTokenTypes.ASSIGN)('=')
        AidlExpressionImpl(EXPRESSION)
          PsiElement(AidlTokenTypes.LBRACE)('{')
          PsiElement(AidlTokenTypes.RBRACE)('}')
        PsiElement(AidlTokenTypes.SEMICOLON)(';')
      AidlVariableDeclarationImpl("n")
        AidlTypeElementImpl(TYPE_ELEMENT)
          PsiElement(AidlTokenTypes.INT_KEYWORD)('int')
        AidlNameComponentImpl("n")
          PsiElement(AidlTokenTypes.IDENTIFIER)('n')
        PsiElement(AidlTokenTypes.SEMICOLON)(';')
      AidlVariableDeclarationImpl("m")
        AidlTypeElementImpl(TYPE_ELEMENT)
          PsiElement(AidlTokenTypes.INT_KEYWORD)('int')
        AidlNameComponentImpl("m")
          PsiElement(AidlTokenTypes.IDENTIFIER)('m')
        PsiElement(AidlTokenTypes.SEMICOLON)(';')
      AidlVariableDeclarationImpl("s")
        AidlTypeElementImpl("String")
          AidlAnnotationElementImpl("utf8InCpp")
            PsiElement(AidlTokenTypes.AT)('@')
            AidlQualifiedNameImpl("utf8InCpp")
              AidlNameComponentImpl("utf8InCpp")
                PsiElement(AidlTokenTypes.IDENTIFIER)('utf8InCpp')
          AidlQualifiedNameImpl("String")
            AidlNameComponentImpl("String")
              PsiElement(AidlTokenTypes.IDENTIFIER)('String')
        AidlNameComponentImpl("s")
          PsiElement(AidlTokenTypes.IDENTIFIER)('s')
        PsiElement(AidlTokenTypes.SEMICOLON)(';')
      AidlVariableDeclarationImpl("ibinder")
        AidlTypeElementImpl("IBinder")
          AidlAnnotationElementImpl("nullable")
            PsiElement(AidlTokenTypes.AT)('@')
            AidlQualifiedNameImpl("nullable")
              AidlNameComponentImpl("nullable")
                PsiElement(AidlTokenTypes.IDENTIFIER)('nullable')
          AidlQualifiedNameImpl("IBinder")
            AidlNameComponentImpl("IBinder")
              PsiElement(AidlTokenTypes.IDENTIFIER)('IBinder')
        AidlNameComponentImpl("ibinder")
          PsiElement(AidlTokenTypes.IDENTIFIER)('ibinder')
        PsiElement(AidlTokenTypes.SEMICOLON)(';')
      AidlVariableDeclarationImpl("ss")
        AidlTypeElementImpl("List")
          AidlAnnotationElementImpl("utf8InCpp")
            PsiElement(AidlTokenTypes.AT)('@')
            AidlQualifiedNameImpl("utf8InCpp")
              AidlNameComponentImpl("utf8InCpp")
                PsiElement(AidlTokenTypes.IDENTIFIER)('utf8InCpp')
          AidlQualifiedNameImpl("List")
            AidlNameComponentImpl("List")
              PsiElement(AidlTokenTypes.IDENTIFIER)('List')
          PsiElement(AidlTokenTypes.LT)('<')
          AidlTypeElementImpl("String")
            AidlQualifiedNameImpl("String")
              AidlNameComponentImpl("String")
                PsiElement(AidlTokenTypes.IDENTIFIER)('String')
          PsiElement(AidlTokenTypes.GT)('>')
        AidlNameComponentImpl("ss")
          PsiElement(AidlTokenTypes.IDENTIFIER)('ss')
        PsiElement(AidlTokenTypes.SEMICOLON)(';')
      AidlVariableDeclarationImpl("be")
        AidlTypeElementImpl("ByteEnum")
          AidlQualifiedNameImpl("ByteEnum")
            AidlNameComponentImpl("ByteEnum")
              PsiElement(AidlTokenTypes.IDENTIFIER)('ByteEnum')
        AidlNameComponentImpl("be")
          PsiElement(AidlTokenTypes.IDENTIFIER)('be')
        PsiElement(AidlTokenTypes.SEMICOLON)(';')
      AidlConstantDeclarationImpl("S1")
        PsiElement(AidlTokenTypes.CONST_KEYWORD)('const')
        AidlTypeElementImpl("String")
          AidlAnnotationElementImpl("utf8InCpp")
            PsiElement(AidlTokenTypes.AT)('@')
            AidlQualifiedNameImpl("utf8InCpp")
              AidlNameComponentImpl("utf8InCpp")
                PsiElement(AidlTokenTypes.IDENTIFIER)('utf8InCpp')
          AidlQualifiedNameImpl("String")
            AidlNameComponentImpl("String")
              PsiElement(AidlTokenTypes.IDENTIFIER)('String')
        AidlNameComponentImpl("S1")
          PsiElement(AidlTokenTypes.IDENTIFIER)('S1')
        PsiElement(AidlTokenTypes.ASSIGN)('=')
        AidlExpressionImpl(EXPRESSION)
          PsiElement(AidlTokenTypes.C_STR)('"a string constant in union"')
        PsiElement(AidlTokenTypes.SEMICOLON)(';')
      PsiElement(AidlTokenTypes.RBRACE)('}')