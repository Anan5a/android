FILE
  PsiComment(AidlTokenTypes.BLOCK_COMMENT)('/*\n * Copyright (C) 2019 The Android Open Source Project\n *\n * Licensed under the Apache License, Version 2.0 (the "License");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an "AS IS" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */')
  AidlPackageImpl("android.aidl.tests")
    PsiElement(AidlTokenTypes.PACKAGE_KEYWORD)('package')
    AidlQualifiedNameImpl("android.aidl.tests")
      AidlNameComponentImpl("android")
        PsiElement(AidlTokenTypes.IDENTIFIER)('android')
      PsiElement(AidlTokenTypes.DOT)('.')
      AidlNameComponentImpl("aidl")
        PsiElement(AidlTokenTypes.IDENTIFIER)('aidl')
      PsiElement(AidlTokenTypes.DOT)('.')
      AidlNameComponentImpl("tests")
        PsiElement(AidlTokenTypes.IDENTIFIER)('tests')
    PsiElement(AidlTokenTypes.SEMICOLON)(';')
  AidlBodyImpl(BODY)
    AidlAnnotationElementImpl("SuppressWarnings")
      PsiElement(AidlTokenTypes.AT)('@')
      AidlQualifiedNameImpl("SuppressWarnings")
        AidlNameComponentImpl("SuppressWarnings")
          PsiElement(AidlTokenTypes.IDENTIFIER)('SuppressWarnings')
      PsiElement(AidlTokenTypes.LPAREN)('(')
      AidlNameComponentImpl("value")
        PsiElement(AidlTokenTypes.IDENTIFIER)('value')
      PsiElement(AidlTokenTypes.ASSIGN)('=')
      AidlExpressionImpl(EXPRESSION)
        PsiElement(AidlTokenTypes.LBRACE)('{')
        AidlExpressionImpl(EXPRESSION)
          PsiElement(AidlTokenTypes.C_STR)('"const-name"')
        PsiElement(AidlTokenTypes.RBRACE)('}')
      PsiElement(AidlTokenTypes.RPAREN)(')')
    AidlAnnotationElementImpl("Backing")
      PsiElement(AidlTokenTypes.AT)('@')
      AidlQualifiedNameImpl("Backing")
        AidlNameComponentImpl("Backing")
          PsiElement(AidlTokenTypes.IDENTIFIER)('Backing')
      PsiElement(AidlTokenTypes.LPAREN)('(')
      AidlNameComponentImpl("type")
        PsiElement(AidlTokenTypes.IDENTIFIER)('type')
      PsiElement(AidlTokenTypes.ASSIGN)('=')
      AidlExpressionImpl(EXPRESSION)
        PsiElement(AidlTokenTypes.C_STR)('"int"')
      PsiElement(AidlTokenTypes.RPAREN)(')')
    AidlEnumDeclarationImpl("ConstantExpressionEnum" as in "android.aidl.tests.ConstantExpressionEnum")
      PsiElement(AidlTokenTypes.ENUM_KEYWORD)('enum')
      AidlDottedNameImpl("ConstantExpressionEnum")
        AidlNameComponentImpl("ConstantExpressionEnum")
          PsiElement(AidlTokenTypes.IDENTIFIER)('ConstantExpressionEnum')
      PsiElement(AidlTokenTypes.LBRACE)('{')
      PsiComment(AidlTokenTypes.COMMENT)('// Should be all true / ones.')
      PsiComment(AidlTokenTypes.COMMENT)('// dec literals are either int or long')
      AidlEnumeratorDeclarationImpl("decInt32_1")
        AidlNameComponentImpl("decInt32_1")
          PsiElement(AidlTokenTypes.IDENTIFIER)('decInt32_1')
        PsiElement(AidlTokenTypes.ASSIGN)('=')
        AidlExpressionImpl(EXPRESSION)
          PsiElement(AidlTokenTypes.LPAREN)('(')
          AidlExpressionImpl(EXPRESSION)
            PsiElement(AidlTokenTypes.BITWISE_COMPLEMENT)('~')
            AidlExpressionImpl(EXPRESSION)
              PsiElement(AidlTokenTypes.LPAREN)('(')
              AidlExpressionImpl(EXPRESSION)
                PsiElement(AidlTokenTypes.MINUS)('-')
                PsiElement(AidlTokenTypes.INTVALUE)('1')
              PsiElement(AidlTokenTypes.RPAREN)(')')
          PsiElement(AidlTokenTypes.RPAREN)(')')
          PsiElement(AidlTokenTypes.EQUALITY)('==')
          AidlExpressionImpl(EXPRESSION)
            PsiElement(AidlTokenTypes.INTVALUE)('0')
      PsiElement(AidlTokenTypes.COMMA)(',')
      AidlEnumeratorDeclarationImpl("decInt32_2")
        AidlNameComponentImpl("decInt32_2")
          PsiElement(AidlTokenTypes.IDENTIFIER)('decInt32_2')
        PsiElement(AidlTokenTypes.ASSIGN)('=')
        AidlExpressionImpl(EXPRESSION)
          PsiElement(AidlTokenTypes.BITWISE_COMPLEMENT)('~')
          AidlExpressionImpl(EXPRESSION)
            PsiElement(AidlTokenTypes.BITWISE_COMPLEMENT)('~')
            AidlExpressionImpl(EXPRESSION)
              PsiElement(AidlTokenTypes.LPAREN)('(')
              AidlExpressionImpl(EXPRESSION)
                PsiElement(AidlTokenTypes.INTVALUE)('1')
                PsiElement(AidlTokenTypes.LSHIFT)('<<')
                AidlExpressionImpl(EXPRESSION)
                  PsiElement(AidlTokenTypes.INTVALUE)('31')
              PsiElement(AidlTokenTypes.RPAREN)(')')
              PsiElement(AidlTokenTypes.EQUALITY)('==')
              AidlExpressionImpl(EXPRESSION)
                PsiElement(AidlTokenTypes.LPAREN)('(')
                AidlExpressionImpl(EXPRESSION)
                  PsiElement(AidlTokenTypes.INTVALUE)('1')
                  PsiElement(AidlTokenTypes.LSHIFT)('<<')
                  AidlExpressionImpl(EXPRESSION)
                    PsiElement(AidlTokenTypes.INTVALUE)('31')
                PsiElement(AidlTokenTypes.RPAREN)(')')
      PsiElement(AidlTokenTypes.COMMA)(',')
      AidlEnumeratorDeclarationImpl("decInt64_1")
        AidlNameComponentImpl("decInt64_1")
          PsiElement(AidlTokenTypes.IDENTIFIER)('decInt64_1')
        PsiElement(AidlTokenTypes.ASSIGN)('=')
        AidlExpressionImpl(EXPRESSION)
          PsiElement(AidlTokenTypes.LPAREN)('(')
          AidlExpressionImpl(EXPRESSION)
            PsiElement(AidlTokenTypes.BITWISE_COMPLEMENT)('~')
            AidlExpressionImpl(EXPRESSION)
              PsiElement(AidlTokenTypes.LPAREN)('(')
              AidlExpressionImpl(EXPRESSION)
                PsiElement(AidlTokenTypes.MINUS)('-')
                PsiElement(AidlTokenTypes.INTVALUE)('1L')
              PsiElement(AidlTokenTypes.RPAREN)(')')
          PsiElement(AidlTokenTypes.RPAREN)(')')
          PsiElement(AidlTokenTypes.EQUALITY)('==')
          AidlExpressionImpl(EXPRESSION)
            PsiElement(AidlTokenTypes.INTVALUE)('0')
      PsiElement(AidlTokenTypes.COMMA)(',')
      AidlEnumeratorDeclarationImpl("decInt64_2")
        AidlNameComponentImpl("decInt64_2")
          PsiElement(AidlTokenTypes.IDENTIFIER)('decInt64_2')
        PsiElement(AidlTokenTypes.ASSIGN)('=')
        AidlExpressionImpl(EXPRESSION)
          PsiElement(AidlTokenTypes.LPAREN)('(')
          AidlExpressionImpl(EXPRESSION)
            PsiElement(AidlTokenTypes.BITWISE_COMPLEMENT)('~')
            AidlExpressionImpl(EXPRESSION)
              PsiElement(AidlTokenTypes.INTVALUE)('4294967295L')
          PsiElement(AidlTokenTypes.RPAREN)(')')
          PsiElement(AidlTokenTypes.NEQ)('!=')
          AidlExpressionImpl(EXPRESSION)
            PsiElement(AidlTokenTypes.INTVALUE)('0')
      PsiElement(AidlTokenTypes.COMMA)(',')
      AidlEnumeratorDeclarationImpl("decInt64_3")
        AidlNameComponentImpl("decInt64_3")
          PsiElement(AidlTokenTypes.IDENTIFIER)('decInt64_3')
        PsiElement(AidlTokenTypes.ASSIGN)('=')
        AidlExpressionImpl(EXPRESSION)
          PsiElement(AidlTokenTypes.LPAREN)('(')
          AidlExpressionImpl(EXPRESSION)
            PsiElement(AidlTokenTypes.BITWISE_COMPLEMENT)('~')
            AidlExpressionImpl(EXPRESSION)
              PsiElement(AidlTokenTypes.INTVALUE)('4294967295')
          PsiElement(AidlTokenTypes.RPAREN)(')')
          PsiElement(AidlTokenTypes.NEQ)('!=')
          AidlExpressionImpl(EXPRESSION)
            PsiElement(AidlTokenTypes.INTVALUE)('0')
      PsiElement(AidlTokenTypes.COMMA)(',')
      AidlEnumeratorDeclarationImpl("decInt64_4")
        AidlNameComponentImpl("decInt64_4")
          PsiElement(AidlTokenTypes.IDENTIFIER)('decInt64_4')
        PsiElement(AidlTokenTypes.ASSIGN)('=')
        AidlExpressionImpl(EXPRESSION)
          PsiElement(AidlTokenTypes.BITWISE_COMPLEMENT)('~')
          AidlExpressionImpl(EXPRESSION)
            PsiElement(AidlTokenTypes.BITWISE_COMPLEMENT)('~')
            AidlExpressionImpl(EXPRESSION)
              PsiElement(AidlTokenTypes.LPAREN)('(')
              AidlExpressionImpl(EXPRESSION)
                PsiElement(AidlTokenTypes.INTVALUE)('1L')
                PsiElement(AidlTokenTypes.LSHIFT)('<<')
                AidlExpressionImpl(EXPRESSION)
                  PsiElement(AidlTokenTypes.INTVALUE)('63')
              PsiElement(AidlTokenTypes.RPAREN)(')')
              PsiElement(AidlTokenTypes.EQUALITY)('==')
              AidlExpressionImpl(EXPRESSION)
                PsiElement(AidlTokenTypes.LPAREN)('(')
                AidlExpressionImpl(EXPRESSION)
                  PsiElement(AidlTokenTypes.INTVALUE)('1L')
                  PsiElement(AidlTokenTypes.LSHIFT)('<<')
                  AidlExpressionImpl(EXPRESSION)
                    PsiElement(AidlTokenTypes.INTVALUE)('63')
                PsiElement(AidlTokenTypes.RPAREN)(')')
      PsiElement(AidlTokenTypes.COMMA)(',')
      PsiComment(AidlTokenTypes.COMMENT)('// hex literals could be int or long')
      PsiComment(AidlTokenTypes.COMMENT)('// 0x7fffffff is int, hence can be negated')
      AidlEnumeratorDeclarationImpl("hexInt32_1")
        AidlNameComponentImpl("hexInt32_1")
          PsiElement(AidlTokenTypes.IDENTIFIER)('hexInt32_1')
        PsiElement(AidlTokenTypes.ASSIGN)('=')
        AidlExpressionImpl(EXPRESSION)
          PsiElement(AidlTokenTypes.MINUS)('-')
          PsiElement(AidlTokenTypes.HEXVALUE)('0x7fffffff')
          PsiElement(AidlTokenTypes.LT)('<')
          AidlExpressionImpl(EXPRESSION)
            PsiElement(AidlTokenTypes.INTVALUE)('0')
      PsiElement(AidlTokenTypes.COMMA)(',')
      PsiComment(AidlTokenTypes.COMMENT)('// 0x80000000 is int32_t max + 1')
      AidlEnumeratorDeclarationImpl("hexInt32_2")
        AidlNameComponentImpl("hexInt32_2")
          PsiElement(AidlTokenTypes.IDENTIFIER)('hexInt32_2')
        PsiElement(AidlTokenTypes.ASSIGN)('=')
        AidlExpressionImpl(EXPRESSION)
          PsiElement(AidlTokenTypes.HEXVALUE)('0x80000000')
          PsiElement(AidlTokenTypes.LT)('<')
          AidlExpressionImpl(EXPRESSION)
            PsiElement(AidlTokenTypes.INTVALUE)('0')
      PsiElement(AidlTokenTypes.COMMA)(',')
      PsiComment(AidlTokenTypes.COMMENT)('// 0xFFFFFFFF is int32_t, not long; if it were long then ~(long)0xFFFFFFFF != 0')
      AidlEnumeratorDeclarationImpl("hexInt32_3")
        AidlNameComponentImpl("hexInt32_3")
          PsiElement(AidlTokenTypes.IDENTIFIER)('hexInt32_3')
        PsiElement(AidlTokenTypes.ASSIGN)('=')
        AidlExpressionImpl(EXPRESSION)
          PsiElement(AidlTokenTypes.BITWISE_COMPLEMENT)('~')
          AidlExpressionImpl(EXPRESSION)
            PsiElement(AidlTokenTypes.HEXVALUE)('0xFFFFFFFF')
            PsiElement(AidlTokenTypes.EQUALITY)('==')
            AidlExpressionImpl(EXPRESSION)
              PsiElement(AidlTokenTypes.INTVALUE)('0')
      PsiElement(AidlTokenTypes.COMMA)(',')
      PsiComment(AidlTokenTypes.COMMENT)('// 0x7FFFFFFFFFFFFFFF is long, hence can be negated')
      AidlEnumeratorDeclarationImpl("hexInt64_1")
        AidlNameComponentImpl("hexInt64_1")
          PsiElement(AidlTokenTypes.IDENTIFIER)('hexInt64_1')
        PsiElement(AidlTokenTypes.ASSIGN)('=')
        AidlExpressionImpl(EXPRESSION)
          PsiElement(AidlTokenTypes.MINUS)('-')
          PsiElement(AidlTokenTypes.HEXVALUE)('0x7FFFFFFFFFFFFFFF')
          PsiElement(AidlTokenTypes.LT)('<')
          AidlExpressionImpl(EXPRESSION)
            PsiElement(AidlTokenTypes.INTVALUE)('0')
      PsiElement(AidlTokenTypes.RBRACE)('}')